0. (!) Временный пользовательский интерфейс проекта: 127.0.0.1:8000/home/

1. Бэкенд: Django
2. БД: PostgreSQL
3. Хранение медиафайлов (видео): папка /media на сервере.
4. Аутентификация / регистрация: allauth.
    - Для входа в приложении воспользуйтесь адресом 127.0.0.1:8000/home;
    - Создана кастомизированная модель пользователя (CustomUser) с дополнительным полем "phone";
    - Создана кастомизированная форма регистрации (signup) пользователя, запрашивающая email, юзернейм и номер телефона;
    - Предусмотрена возможность входа (signin) через стороннюю учетную запись (Google);
    - Настроена возможность рассылки писем (с яндекс аккаунта, в дальнейшем будет создан специальный тестовый аккаунт для проекта), в т.ч. при регистрации.
5. Модели:
    - Модель Video, помимо прочего, содержит поля типов ArrayField (для массива хэштегов) и FileField (для хранения пути к видеофайлам);
    - Поиск по моделям: для поиска видео по описанию, хэшетгам и комментариям реализован отдельный метод search_video (см. файл search.py);
6. Тесты: cтандартная библиотека unittest
    - В tests.py добавлены тесты для основных моделей (Author, Video, Comment);
    - Добавлены тесты для проверки корректной работы метода search_video.
    - Добавлены тесты API (для основных моделей, по которым будет вестись поиск, создание/удаление объектов - Video, Comment, Like);
    - Подключены Github Actions для автоматического запуска тестов при их загрузке в репозиторий.
7. API: Django RestAPI.
     Для реализации представлений использован класс ViewSet.
     Подключен Swagger: 127.0.0.1:8000/swagger-ui/

     API по уровню доступа (разрешений):
        - CustomUser (UserViewset) - только для администратора;
        - Subscription (SubscriptionViewset) - только для авторизованных пользователей;
        - Author (AuthorViewset), Video (VideoViewset), Comment(CommentViewset), Like (LikeViewset) - методы GET и HEAD
          для всех пользователей, остальные методы - только для авторизованных пользователей;

     API - запросы по моделям:
      - CustomUser:
            url: 127.0.0.1:8000/api/user/[id]/
            методы:
                GET, POST, DELETE, PUT/PATCH - доступно только для администратора
      - Author:
            url: 127.0.0.1:8000/api/author/[id]/
            методы:
                GET - при передаче параметра user_id (localhost/api/video/?user_id=int) осуществляется поиск профиля
                автора по юзеру
                POST - юзер может создать только одного автора от своего имени (переопределен метод create())
                DELETE - юзер может удалить только своего автора (переопределен метод destroy())
                PUT/PATCH - переопределен метод update(), можно менять только "своего" автора
      - Subscription:
            url: 127.0.0.1:8000/api/subscription/[id]/
            методы:
                GET, POST
                DELETE - юзер может удалить только свою собственную подписку (переопределен метод destroy())
                PUT/PATCH - запрещен (переопределен метод update())
      - Video:
            url: 127.0.0.1:8000/api/video/[id]/
            методы:
                GET - при передаче параметра query (localhost/api/video/?query=string) осуществляется поиск видео
                по описанию, хэштегам, комментариям при помощи подключенного метода search_video() (см. search.py)
                GET - при передаче параметра author_id (localhost/api/video/?author_id=int) осуществляется поиск видео
                по автору
                POST
                DELETE - юзер может удалить только собственное видео (переопределен метод destroy())
                PUT/PATCH - юзер может редактировать только собственное видео (переопределен метод update())
      - Comment:
            url: 127.0.0.1:8000/api/comment/[id]/
            методы:
                GET - при передаче параметра author_id (localhost/api/video/?author_id=int) осуществляется поиск комментариев
                по автору
                GET - при передаче параметра video_id (localhost/api/video/?author_id=int) осуществляется поиск всех
                комментариев к видео
                POST
                DELETE - юзер может удалить только собственный комментарий (переопределен метод destroy())
                PUT/PATCH - юзер может редактировать только собственный комментарий (переопределен метод update())
      - Like:
            url: 127.0.0.1:8000/api/like/[id]/
            методы:
                GET - при передаче параметра author_id (localhost/api/video/?author_id=int) осуществляется поиск лайков
                по автору
                GET - при передаче параметра video_id (localhost/api/video/?author_id=int) осуществляется поиск всех лайков к видео
                POST
                DELETE - юзер может удалить только собственный лайк (переопределен метод destroy())
                PUT/PATCH - запрещен (переопределен метод update())
8. Публичные и приватные чаты: Websocket + Django Channels:
    - privatechat - приложение для чатов один-на-один. Сообщения сохраняются в БД (см. модель PrivateMesage).
      (!) Поле "isRead" необходимо для будущей реализации функции уведомления юзера о непрочтенном сообщении.
    - publicchat - приложение для публичных чатов. Добавлена модель PublicChat для сохранения в БД конкретных чатов.
      Функция сохранения сообщений в БД для публичных чатов может быть добавлена при необходимости.